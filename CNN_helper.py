# -*- coding: utf-8 -*-
"""
Created on Sat Feb  1 00:33:17 2020

@author: Erik

Contains basic shared routines and parameters relevant to the abyss flare detection suite.
In particular is 'rootDir' which holds the path to the image directories, the pickle file 
(generated with 'make_imageset.py') AND the model (generated by 'train_abyss_CNN.py')
(SEE README for more syntax)

"""
import cv2
import numpy as np
import tensorflow
from tensorflow.keras import datasets, layers, models

imageSize =  64 # Configure this for testing and optimsation, larger = slower - powers of 2

# RootDir holds the path to the image file directory 
# AND the path to the checkpoints (i.e. the saved training models)
rootDir = './training/' 

def getImageSize():
    return imageSize  

def getRootDir():
    return rootDir

def getModel():
    thismodel = models.Sequential()
    thismodel.add(layers.Conv2D(imageSize, (3, 3), activation='relu', input_shape=(imageSize, imageSize, 3)))
    thismodel.add(layers.MaxPooling2D((2, 2)))
    thismodel.add(layers.Conv2D(imageSize*2, (3, 3), activation='relu'))
    thismodel.add(layers.MaxPooling2D((2, 2)))
    thismodel.add(layers.Conv2D(imageSize*2, (3, 3), activation='relu'))
    
    thismodel.add(layers.Flatten())
    thismodel.add(layers.Dense(imageSize*2, activation='relu'))
    thismodel.add(layers.Dense(2, activation='softmax'))
    return thismodel


def doImag(fname):
    thresh= 200 # This is not entirely arbitrary.. cutoff for pixel filtering. Â¬mean<thresh<255
    ksize=3 #minimum smoothing to improve training accuracy. keep it small <5
    imIn=cv2.resize(cv2.imread(fname),(imageSize,imageSize))
    kernel = np.ones((ksize,ksize),np.float32)/(ksize**2)
    imIn = cv2.filter2D(imIn,-1,kernel)
    mask=(np.sum((imIn>thresh).astype(int),axis=2))
    mask=np.repeat(mask[: ,:,np.newaxis],3,axis=2)
    return imIn*mask
