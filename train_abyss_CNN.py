# -*- coding: utf-8 -*-
"""
Created on Fri Jan 31 11:22:55 2020

@author: Erik

train_abyss_CNN.py builds the CNN model, for use by detector.py in finding images with lens flare.
expects a pickle file generated by 'make_imageset.py' with appropriately formatted contents.
Tensorflow expects a particular format, and this script will allocate labels with a similar expectation.

(SEE README for more syntax)

Aknowledgement goes to the online tensorflow tutorials for help
https://www.tensorflow.org/tutorials/images/cnn

"""

import numpy as np
import tensorflow
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import CNN_helper
import pickle

#--------------------------------------------------------------------
#Phase 1. format the image data so it's digested by tensorflow

rootDir = CNN_helper.getRootDir()
with open(rootDir+'flaretraining.pkl', 'rb') as f:
    flares,goods = pickle.load(f)
    
imageSize=CNN_helper.getImSize()
class_names = ['good','faulty']

#split data into 70/30 for training testing.
frac=0.7
n_files=len(flares)
n_train=int(n_files*frac)
n_test=n_files-n_train

#Now bundle up the data in way that the CNN will deal with.
train_images=np.concatenate([flares[0:n_train,:,:,:],goods[0:n_train,:,:,:]],axis=0)
test_images=np.concatenate([flares[n_train:n_files,:,:,:],goods[n_train:n_files,:,:,:]],axis=0)
train_labels=np.concatenate([np.ones(n_train),np.zeros(n_train)],axis=0)
test_labels=np.concatenate([np.ones(n_test),np.zeros(n_test)],axis=0)


# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0
#--------------------------------------------------------------------
#Phase 2 construct the network architucture, train it

#get the model from CNN_helper
model = CNN_helper.getModel() # Get the model from CNN helper.

#train it
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#--------------------------------------------------------------------
#Phase 4 evaulate the CNN, save it locally for later use

history = model.fit(train_images, train_labels, epochs=15, 
                    validation_data=(test_images, test_labels))

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

#model complete, save the weights
model.save_weights(rootDir+'./checkpoints'+str(imageSize)+'/my_checkpoint')
